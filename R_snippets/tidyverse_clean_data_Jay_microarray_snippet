# this is the original script I wrote to clean the Bewley data from scratch. Paste here for reference

# this script will work on QC of the Bewley *raw* data downloaded from https://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-6491/, the AM expression from healthy human subjects --- 3 exposed vs 3 control according to the original manuscript's methods. 

date()

# Installing and loading required packages ========================================================
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install(c("affyPLM", "affy", "AnnotationDbi","hgu133plus2.db"), version = "3.8")

library(affyPLM)
library(affy)
library(tidyverse)
library(limma)
library(annotate)
library(Biobase)
library(AnnotationDbi)
library(hgu133plus2.db)

# Make an expression set object with the healthy human subjects

## load the pheno data file
pheno <- read_tsv('BewleyData/E-MTAB-6491.sdrf.txt') %>%
  rename_all(
    funs(
        stringr::str_replace_all(., ' ', '_') %>%
        stringr::str_replace_all(., 'Factor_Value', '') %>%
        stringr::str_replace_all(., '\\[|\\]', '') 
      
  )) %>%
  dplyr::select(Source_Name, infect, disease) %>%
  rename(Source = Source_Name, Infect = infect, Disease = disease) %>%
  filter(Disease == 'normal') %>%
  mutate(Infect =  stringr::str_replace_all(Infect, 'Streptococcus pneumoniae ','')) %>%
  mutate(Infect = factor(Infect, levels = c('CGSP14','none'))) %>%
  dplyr::select(-Disease)


## read those cel files in the Source column (AffyBatch extends eset class)

data_path <- 'BewleyData/E-MTAB-6491.raw.1'

## bind the df for each sample together, for each sample the df has Cts and probes and Sample columns, probes have removed the last one or two digits 
dat <- pheno %>% pull(Source) %>%
  map(function(x)  probes(ReadAffy(filenames = file.path(data_path, x), compress = TRUE)) %>%
        as.data.frame %>%
        rownames_to_column %>%
        mutate(probes = str_replace(rowname, '\\d+$','')) %>%
        dplyr::select(-rowname) %>%
        mutate(Sample = colnames(.)[1]) %>%
        rename(Cts = names(.)[1]) ) %>%
  bind_rows

## take the median value of the probes to be the value for that probeset and make an expressionset object from the current data as the raw data to save
median_cts_dat <- dat %>%
  group_by(Sample, probes) %>%
  summarise(medCts = median(Cts)) %>%
  spread(key = Sample, value = medCts)


## reformat the df 
cts <- median_cts_dat %>%
  remove_rownames() %>%
  column_to_rownames(var = 'probes') %>%
  rename_all(
    funs(
      stringr::str_replace_all(., '.CEL$', '') %>%
      paste0('S',.) 
    )) 


pheno <- pheno %>%
  mutate(rowname = stringr::str_replace_all(Source, '.CEL$', '') ) %>%
  mutate(rowname = paste0('S',rowname) ) %>%
  arrange(Source) %>%
  column_to_rownames(var = 'rowname')  

## the feature info
feature_info <- AnnotationDbi::select(hgu133plus2.db, rownames(cts), c("SYMBOL","ENTREZID", "GENENAME")) %>%
  filter(!duplicated(PROBEID))%>%
  column_to_rownames(var = 'PROBEID')  

## build the expression set object using the cts matrix the pheno and feature data
phenoData <- new("AnnotatedDataFrame", data = pheno)
featureData <- new('AnnotatedDataFrame', data = feature_info)

# build the eset object
eset <- ExpressionSet(assayData=as.matrix(cts), 
                         phenoData=phenoData, 
                         featureData= featureData)

## save the eset
write_rds(eset, 'processedData/bewley_data_healthy_subjects_eset_median_probes.RDS')
